@model ML.Usuario

@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.min.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js"></script>

<h2>Usuario</h2>
<!--Poner este evento enctype para envíar archivos al controlador-->
@using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new
{
    @enctype = "multipart/form-data",
    @onsubmit = "validarFormulario(event)"
})) //Onsubmit para saber si...
{

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.IdUsuario)
    @Html.HiddenFor(model => model.Imagen)
    <div class="card p-3 bg-light shadow-sm">
        <div class="row">
            <div class="col">
                @Html.LabelFor(model => model.UserName, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control rounded-pill", @onblur = "validarVacio(event)", @id = "inptUserName" })

                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Nombre, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Nombre, new
                {
                    @class = "form-control rounded-pill",
                    /*@onkeypress = "SoloLetras(event)", @onblur="BorrarMensaje(event)",*/
                    @id = "idNombre"
                }) <!--ONKEYPRESS=> detecta la tecla presionada (evento)-->
                <span class="error"></span>

                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.ApellidoPaterno, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.ApellidoPaterno, new
                {
                    @class = "form-control rounded-pill",
                    @onkeypress = "SoloLetras(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.ApellidoPaterno, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.ApellidoMaterno, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.ApellidoMaterno, new
                {
                    @class = "form-control rounded-pill",
                    @onkeypress = "SoloLetras(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.ApellidoMaterno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col">
                @Html.LabelFor(model => model.Email, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Email, new
                {
                    @class = "form-control rounded-pill",
                    @onblur = "validarCorreo(event)",
                    @id = "inptEmail"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Password, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Password, new
                {
                    @class = "form-control rounded-pill",
                    @type = "password",
                    @id = "inptPassword"
                })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                <label class="form-label text-dark fw-bold">Confirmar Password</label>
                <input class="form-control rounded-pill" type="password" id="inptConfirmarPassword"
                       onblur="validarPassword(event)" />
                <span class="error"></span>
            </div>
            <div class="col">
                @Html.LabelFor(model => model.FechaNacimiento, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control rounded-pill", @id = "datepicker" })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>

            <div class="col">
                @Html.LabelFor(model => model.Sexo, new { @class = "form-label text-dark fw-bold" })

                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Sexo, "F ", new { @class = "form-check-input", @id = "sexoF" })
                    @Html.Label("sexoF", "Femenino", new { @class = "form-check-label" })
                </div>

                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Sexo, "M ", new { @class = "form-check-input", @id = "sexoM" })
                    @Html.Label("sexoM", "Masculino", new { @class = "form-check-label" })
                </div>

                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Sexo, "O ", new { @class = "form-check-input", @id = "sexoO" })
                    @Html.Label("sexoO", "Otro", new { @class = "form-check-label" })
                </div>

                @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
            </div>


        </div>
        <div class="row">
            <div class="col">
                <!--Onkeyup para cadena completa-->
                @Html.LabelFor(model => model.Telefono, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Telefono, new
                {
                    @class = "form-control rounded-pill",
                    @onkeypress = "validarNumerosCaracter(event)",
                    @onkeyup = "validarNumerosCadena(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Celular, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Celular, new
                {
                    @class = "form-control rounded-pill",
                    @onkeypress = "validarNumerosCaracter(event)",
                    @onkeyup = "validarNumerosCadena(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CURP, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.CURP, new
                {
                    @class = "form-control rounded-pill",
                    @onkeyup = "validarCURP(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.CURP, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                <!--El IdRol tiene una condición if, si viene vacio asignarle 0 -->
                <!--Para que ese 0 NO se muestre en la vista Agregar, modificar el modelo-->
                <!--        public int ?IdRol { get; set; }    //Solo poner '?' en el nombre de la variable -->
                <!--    Esto YA NO SIRVE    -->
                <!-- Html.LabelFor(model => model.Rol.IdRol, new { class = "form-label text-dark fw-bold" }) -->
                <!-- Html.TextBoxFor(model => model.Rol.IdRol, new { class = "form-control rounded-pill" }) -->

                @Html.LabelFor(model => model.Rol.IdRol, new { @class = "form-label text-dark fw-bold" })
                <!-- Nueva lista que está en el Modelo Rol y se llama Roles -->
                @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Selecciona un Rol", new { @class = "form-control" })
                <!--IdRol=Nombre de la propiedad, Nombre=Lo que va a ver el usuario-->
            </div>
        </div>
    </div>

    <p></p>
    <h2>Dirección</h2>
    <div class="card p-3 bg-light shadow-sm">
        <div class="row">
            <div class="col">
                @Html.LabelFor(model => model.Direccion.Calle, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Direccion.Calle, new
                {
                    @class = "form-control rounded-pill",
                    @onkeypress = "SoloLetras(event)",
                    @onblur = "BorrarMensaje(event)"
                })
                <span class="error"></span>
                @Html.ValidationMessageFor(model => model.Direccion.Calle, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Direccion.NumeroInterior, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control rounded-pill" })
                @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Direccion.NumeroExterior, new { @class = "form-label text-dark fw-bold" })
                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control rounded-pill" })
                @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col">
                @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new { @class = "form-label text-dark fw-bold" })
                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"),
                    "Selecciona el Estado", new { @onchange = "MunicipioGetByIdEstado()", @id = "ddlEstado", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, "", new { @class = "text-danger" })
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new { @class = "form-label text-dark fw-bold" })

                @if (Model.Direccion.Colonia.Municipio.Municipios != null)
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"),
                        "Selecciona un Municipio",
                         new { @onchange = "ColoniaGetByIdMunicipio()", @id = "ddlMunicipio", @class = "form-control" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(String.Empty), "Selecciona un Municipio",
                        new { @onchange = "ColoniaGetByIdMunicipio()", @id = "ddlMunicipio", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, "", new { @class = "text-danger" })
                }
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Direccion.Colonia.IdColonia, new { @class = "form-label text-dark fw-bold" })

                @if (Model.Direccion.Colonia.Colonias != null)
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"),
                        "Selecciona una Colonia",
                        new { @id = "ddlColonia", @class = "form-control" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(String.Empty), "Selecciona una Colonia",
                         new { @id = "ddlColonia", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia, "", new { @class = "text-danger" })
                }
            </div>
        </div>
    </div>

    <p></p>
    <h2>Imagen del Usuario</h2>
    <div class="mb-3 mt-3 col">
        <input type="file" accept=".png" name="inptFileImagen" id="inptFileImagen" class="form-control" onchange="validarExtension(); visualizarImagen(this);" />
        <!--Poner un Campo Oculto para mantener imagen actual si no se selecciona una nueva
        <input type="hidden" name="ImagenActual" id="ImagenActual" value="Convert.ToBase64String(Model.Imagen)" /> -->
        @if (Model.Imagen == null)
        {
            <img id="imgUsuario" src="https://thumb.ac-illust.com/51/51e1c1fc6f50743937e62fca9b942694_t.jpeg" width="150" height="150" />
        }
        else
        {
            <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(Model.Imagen)}")" width="150" height="150" />
        }
    </div>

    <div>
        <p></p>
        <button type="submit" class="btn btn-primary mb-2" name="btnAgregarRegistro" id="btnAgregarRegistro" onchange="validarRegistro();">Agregar Registro</button>
    </div>
}

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<!--VARiables para RUTAS Razor-->
<script>
    var Rutas = {
        GetByIdEstado: "@Url.Action("GetByIdEstado", "Usuario")",
        GetByIdMunicipio: "@Url.Action("GetByIdMunicipio", "Usuario")"
    };
</script>

<!--Orden de carga de scripts:
    -Primero, las librerías como jquery, jquery.validate y jquery-ui.
    -Después, el archivo Validaciones.js.
-->


<script src="~/Scripts/jquery-3.7.0.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">

<script src="~/Scripts/Usuario/ValidacionesForm.js"></script>